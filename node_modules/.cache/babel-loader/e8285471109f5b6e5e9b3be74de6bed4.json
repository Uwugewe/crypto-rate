{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar2r1\\\\Desktop\\\\React.JS\\\\0.4_crypto-rate\\\\crypto-rate\\\\src\\\\Crypto.js\";\nimport React, { Component } from 'react';\nimport './Crypto.css';\nimport CryptoList from './CryptoList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Crypto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptoData = () => {\n      axios.get('https://blockchain.info/pl/ticker').then(res => {\n        const tickers = res.data;\n        this.setState(state => {\n          let newCryptoList = [];\n\n          for (const [ticker, cryptoRate] of Object.entries(tickers)) {\n            // console.log(ticker, cryptoRate);\n            let newCryptoObject = {\n              currency: ticker,\n              symbol: cryptoRate.symbol,\n              buy: cryptoRate.buy,\n              last: cryptoRate.last\n            };\n            newCryptoList.push(newCryptoObject);\n          }\n\n          state.cryptoList = newCryptoList;\n          console.log(state.cryptoList);\n          console.log(tickers);\n        });\n      });\n    };\n\n    this.state = {\n      cryptoList: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCryptoData();\n    console.log(this.state.cryptoList);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CryptoList, {\n      CryptoList: this.state.cryptoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Crypto;","map":{"version":3,"sources":["C:/Users/ar2r1/Desktop/React.JS/0.4_crypto-rate/crypto-rate/src/Crypto.js"],"names":["React","Component","CryptoList","axios","Crypto","constructor","props","getCryptoData","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","Object","entries","newCryptoObject","currency","symbol","buy","last","push","cryptoList","console","log","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,cAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAE3BI,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SAapBC,aAboB,GAaJ,MAAM;AAClBJ,MAAAA,KAAK,CAACK,GAAN,CAAU,mCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACT,cAAMC,OAAO,GAAGD,GAAG,CAACE,IAApB;AAEA,aAAKC,QAAL,CAAeC,KAAD,IAAW;AACrB,cAAIC,aAAa,GAAG,EAApB;;AAEA,eAAI,MAAM,CAACC,MAAD,EAASC,UAAT,CAAV,IAAkCC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAAlC,EAA0D;AACtD;AAEA,gBAAIS,eAAe,GAAG;AAClBC,cAAAA,QAAQ,EAAEL,MADQ;AAElBM,cAAAA,MAAM,EAAEL,UAAU,CAACK,MAFD;AAGlBC,cAAAA,GAAG,EAAEN,UAAU,CAACM,GAHE;AAIlBC,cAAAA,IAAI,EAAEP,UAAU,CAACO;AAJC,aAAtB;AAOAT,YAAAA,aAAa,CAACU,IAAd,CAAmBL,eAAnB;AACH;;AAEDN,UAAAA,KAAK,CAACY,UAAN,GAAmBX,aAAnB;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAYd,KAAK,CAACY,UAAlB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACH,SAnBD;AAqBH,OAzBL;AA0BH,KAxCmB;;AAGhB,SAAKG,KAAL,GAAa;AACTY,MAAAA,UAAU,EAAE;AADH,KAAb;AAGH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChB,SAAKtB,aAAL;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKd,KAAL,CAAWY,UAAvB;AACH;;AA+BDI,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWY;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAhD0B;;AAmD/B,eAAetB,MAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './Crypto.css';\r\nimport CryptoList from './CryptoList';\r\nimport axios from 'axios';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cryptoList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n        console.log(this.state.cryptoList);\r\n    }\r\n\r\n    getCryptoData = () => {\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(res => {\r\n                const tickers = res.data;\r\n\r\n                this.setState((state) => {\r\n                    let newCryptoList = [];\r\n\r\n                    for(const [ticker, cryptoRate] of Object.entries(tickers)){\r\n                        // console.log(ticker, cryptoRate);\r\n\r\n                        let newCryptoObject = {\r\n                            currency: ticker,\r\n                            symbol: cryptoRate.symbol,\r\n                            buy: cryptoRate.buy,\r\n                            last: cryptoRate.last\r\n                        }\r\n\r\n                        newCryptoList.push(newCryptoObject);\r\n                    }\r\n\r\n                    state.cryptoList = newCryptoList;\r\n                    console.log(state.cryptoList);\r\n                    console.log(tickers);\r\n                });\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <CryptoList CryptoList={this.state.cryptoList}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Crypto;"]},"metadata":{},"sourceType":"module"}