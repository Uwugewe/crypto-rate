{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar2r1\\\\Desktop\\\\React.JS\\\\0.4_crypto-rate\\\\crypto-rate\\\\src\\\\Crypto.js\";\nimport React, { Component } from 'react';\nimport './Crypto.css';\nimport CryptoList from './CryptoList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Crypto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptoData = () => {\n      axios.get('https://blockchain.info/pl/ticker').then(res => {\n        const tickers = res.data;\n        this.setState(state => {\n          let newCryptoList = [];\n\n          for (const [ticker, cryptoRate] of Object.entries(tickers)) {\n            let lastCryptoObject = state.cryptoList.find(cryptoObject => {\n              return cryptoObject.currency === ticker;\n            });\n            let newCryptoObject = {\n              currency: ticker,\n              symbol: cryptoRate.symbol,\n              buy: cryptoRate.buy,\n              sell: cryptoRate.sell,\n              last: cryptoRate.last\n            };\n\n            if (lastCryptoObject !== undefined) {//WARUNKI jezeli jest stan\n            } else {\n              newCryptoObject.cssClass = 'blue';\n              newCryptoObject.htmlArray = String.fromCharCode(8596);\n            }\n\n            newCryptoList.push(newCryptoObject);\n          }\n\n          console.log(newCryptoList);\n          return {\n            cryptoList: newCryptoList\n          };\n        });\n      });\n    };\n\n    this.state = {\n      cryptoList: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCryptoData();\n    this.timerID = setInterval(() => {\n      this.getCryptoData();\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(CryptoList, {\n      CryptoList: this.state.cryptoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Crypto;","map":{"version":3,"sources":["C:/Users/ar2r1/Desktop/React.JS/0.4_crypto-rate/crypto-rate/src/Crypto.js"],"names":["React","Component","CryptoList","axios","Crypto","constructor","props","getCryptoData","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","Object","entries","lastCryptoObject","cryptoList","find","cryptoObject","currency","newCryptoObject","symbol","buy","sell","last","undefined","cssClass","htmlArray","String","fromCharCode","push","console","log","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,cAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAE3BI,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SAmBpBC,aAnBoB,GAmBJ,MAAM;AAClBJ,MAAAA,KAAK,CAACK,GAAN,CAAU,mCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACT,cAAMC,OAAO,GAAGD,GAAG,CAACE,IAApB;AAEA,aAAKC,QAAL,CAAeC,KAAD,IAAW;AACrB,cAAIC,aAAa,GAAG,EAApB;;AAEA,eAAI,MAAM,CAACC,MAAD,EAASC,UAAT,CAAV,IAAkCC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAAlC,EAA0D;AAEtD,gBAAIS,gBAAgB,GAAGN,KAAK,CAACO,UAAN,CAAiBC,IAAjB,CAAwBC,YAAD,IAAkB;AAC5D,qBAAOA,YAAY,CAACC,QAAb,KAA0BR,MAAjC;AACH,aAFsB,CAAvB;AAIA,gBAAIS,eAAe,GAAG;AAClBD,cAAAA,QAAQ,EAAER,MADQ;AAElBU,cAAAA,MAAM,EAAET,UAAU,CAACS,MAFD;AAGlBC,cAAAA,GAAG,EAAEV,UAAU,CAACU,GAHE;AAIlBC,cAAAA,IAAI,EAAEX,UAAU,CAACW,IAJC;AAKlBC,cAAAA,IAAI,EAAEZ,UAAU,CAACY;AALC,aAAtB;;AAQA,gBAAIT,gBAAgB,KAAKU,SAAzB,EAAoC,CAChC;AACH,aAFD,MAEO;AACHL,cAAAA,eAAe,CAACM,QAAhB,GAA2B,MAA3B;AACAN,cAAAA,eAAe,CAACO,SAAhB,GAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B;AACH;;AAEDnB,YAAAA,aAAa,CAACoB,IAAd,CAAmBV,eAAnB;AACH;;AACDW,UAAAA,OAAO,CAACC,GAAR,CAAYtB,aAAZ;AAEA,iBAAO;AACHM,YAAAA,UAAU,EAAEN;AADT,WAAP;AAGH,SA/BD;AAiCH,OArCL;AAsCH,KA1DmB;;AAGhB,SAAKD,KAAL,GAAa;AACTO,MAAAA,UAAU,EAAE;AADH,KAAb;AAGH;;AAEDiB,EAAAA,iBAAiB,GAAG;AAChB,SAAK/B,aAAL;AACA,SAAKgC,OAAL,GAAeC,WAAW,CAAE,MAAM;AAC9B,WAAKjC,aAAL;AACH,KAFyB,EAExB,IAFwB,CAA1B;AAGH;;AAEDkC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACH;;AA2CDI,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAK7B,KAAL,CAAWO;AAAnC;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AAlE0B;;AAqE/B,eAAejB,MAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './Crypto.css';\r\nimport CryptoList from './CryptoList';\r\nimport axios from 'axios';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cryptoList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n        this.timerID = setInterval( () => {\r\n            this.getCryptoData();\r\n        },5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    getCryptoData = () => {\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(res => {\r\n                const tickers = res.data;\r\n\r\n                this.setState((state) => {\r\n                    let newCryptoList = [];\r\n\r\n                    for(const [ticker, cryptoRate] of Object.entries(tickers)){\r\n\r\n                        let lastCryptoObject = state.cryptoList.find( (cryptoObject) => {\r\n                            return(cryptoObject.currency === ticker)\r\n                        });\r\n\r\n                        let newCryptoObject = {\r\n                            currency: ticker,\r\n                            symbol: cryptoRate.symbol,\r\n                            buy: cryptoRate.buy,\r\n                            sell: cryptoRate.sell,\r\n                            last: cryptoRate.last\r\n                        }\r\n\r\n                        if (lastCryptoObject !== undefined) {\r\n                            //WARUNKI jezeli jest stan\r\n                        } else {\r\n                            newCryptoObject.cssClass = 'blue';\r\n                            newCryptoObject.htmlArray = String.fromCharCode(8596);\r\n                        }\r\n\r\n                        newCryptoList.push(newCryptoObject);\r\n                    }\r\n                    console.log(newCryptoList);\r\n\r\n                    return({\r\n                        cryptoList: newCryptoList\r\n                    })\r\n                });\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <CryptoList CryptoList={this.state.cryptoList}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Crypto;"]},"metadata":{},"sourceType":"module"}