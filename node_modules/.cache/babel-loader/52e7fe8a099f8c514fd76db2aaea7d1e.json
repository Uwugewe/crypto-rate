{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ar2r1\\\\Desktop\\\\React.JS\\\\0.4_crypto-rate\\\\crypto-rate\\\\src\\\\Crypto.js\";\nimport React, { Component } from 'react';\nimport './Crypto.css';\nimport CryptoList from './CryptoList';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Crypto extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getCryptoData = () => {\n      axios.get('https://blockchain.info/pl/ticker').then(res => {\n        const tickers = res.data;\n        this.setState(state => {\n          let newCryptoList = [];\n\n          for (const [ticker, cryptoRate] of Object.entries(tickers)) {\n            let lastCryptoObject = state.cryptoList.find(cryptoObject => {\n              return cryptoObject.currency === ticker;\n            });\n            let newCryptoObject = {\n              currency: ticker,\n              symbol: cryptoRate.symbol,\n              buy: cryptoRate.buy,\n              sell: cryptoRate.sell,\n              last: cryptoRate.last\n            };\n\n            if (lastCryptoObject !== undefined) {\n              if (newCryptoObject.last > lastCryptoObject.last) {\n                newCryptoObject.cssClass = 'green';\n                newCryptoObject.htmlArray = String.fromCharCode(8593);\n              } else if (newCryptoObject.last < lastCryptoObject.last) {\n                newCryptoObject.cssClass = 'red';\n                newCryptoObject.htmlArray = String.fromCharCode(8595);\n              } else {\n                newCryptoObject.cssClass = 'blue';\n                newCryptoObject.htmlArray = String.fromCharCode(8596);\n              }\n            } else {\n              newCryptoObject.cssClass = 'blue';\n              newCryptoObject.htmlArray = String.fromCharCode(8596);\n            }\n\n            newCryptoList.push(newCryptoObject);\n          }\n\n          console.log(newCryptoList);\n          return {\n            cryptoList: newCryptoList\n          };\n        });\n        this.filterCryptoList();\n      });\n    };\n\n    this.filterCryptoList = () => {\n      this._inputFilter.value = this._inputFilter.value.trim().toUpperCase(); // let filteredCryptoList = this.state.cryptoList.filter( (cryptoObject) => {\n      //     return cryptoObject.currency.includes(this._inputFilter.value);\n      // })\n\n      this.setState(state => {\n        let newfilteredCryptoList = state.cryptoList.filter(cryptoObject => {\n          return cryptoObject.currency.includes(this._inputFilter.value);\n        });\n        return {\n          filteredCryptoList: newfilteredCryptoList\n        };\n      });\n    };\n\n    this.state = {\n      cryptoList: [],\n      filteredCryptoList: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCryptoData();\n    this.timerID = setInterval(() => {\n      this.getCryptoData();\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Crypto\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: element => {\n            this._inputFilter = element;\n          },\n          type: \"text\",\n          placeholder: \"Filter\",\n          onChange: this.filterCryptoList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CryptoList, {\n        CryptoList: this.state.cryptoList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Crypto;","map":{"version":3,"sources":["C:/Users/ar2r1/Desktop/React.JS/0.4_crypto-rate/crypto-rate/src/Crypto.js"],"names":["React","Component","CryptoList","axios","Crypto","constructor","props","getCryptoData","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","Object","entries","lastCryptoObject","cryptoList","find","cryptoObject","currency","newCryptoObject","symbol","buy","sell","last","undefined","cssClass","htmlArray","String","fromCharCode","push","console","log","filterCryptoList","_inputFilter","value","trim","toUpperCase","newfilteredCryptoList","filter","includes","filteredCryptoList","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render","element"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,cAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAE3BI,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAChB,UAAMA,KAAN;;AADgB,SAoBpBC,aApBoB,GAoBJ,MAAM;AAClBJ,MAAAA,KAAK,CAACK,GAAN,CAAU,mCAAV,EACKC,IADL,CACUC,GAAG,IAAI;AACT,cAAMC,OAAO,GAAGD,GAAG,CAACE,IAApB;AAEA,aAAKC,QAAL,CAAeC,KAAD,IAAW;AACrB,cAAIC,aAAa,GAAG,EAApB;;AAEA,eAAI,MAAM,CAACC,MAAD,EAASC,UAAT,CAAV,IAAkCC,MAAM,CAACC,OAAP,CAAeR,OAAf,CAAlC,EAA0D;AAEtD,gBAAIS,gBAAgB,GAAGN,KAAK,CAACO,UAAN,CAAiBC,IAAjB,CAAwBC,YAAD,IAAkB;AAC5D,qBAAOA,YAAY,CAACC,QAAb,KAA0BR,MAAjC;AACH,aAFsB,CAAvB;AAIA,gBAAIS,eAAe,GAAG;AAClBD,cAAAA,QAAQ,EAAER,MADQ;AAElBU,cAAAA,MAAM,EAAET,UAAU,CAACS,MAFD;AAGlBC,cAAAA,GAAG,EAAEV,UAAU,CAACU,GAHE;AAIlBC,cAAAA,IAAI,EAAEX,UAAU,CAACW,IAJC;AAKlBC,cAAAA,IAAI,EAAEZ,UAAU,CAACY;AALC,aAAtB;;AAQA,gBAAIT,gBAAgB,KAAKU,SAAzB,EAAoC;AAEhC,kBAAIL,eAAe,CAACI,IAAhB,GAAuBT,gBAAgB,CAACS,IAA5C,EAAkD;AAC9CJ,gBAAAA,eAAe,CAACM,QAAhB,GAA2B,OAA3B;AACAN,gBAAAA,eAAe,CAACO,SAAhB,GAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B;AACH,eAHD,MAGO,IAAIT,eAAe,CAACI,IAAhB,GAAuBT,gBAAgB,CAACS,IAA5C,EAAkD;AACrDJ,gBAAAA,eAAe,CAACM,QAAhB,GAA2B,KAA3B;AACAN,gBAAAA,eAAe,CAACO,SAAhB,GAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B;AACH,eAHM,MAGA;AACHT,gBAAAA,eAAe,CAACM,QAAhB,GAA2B,MAA3B;AACAN,gBAAAA,eAAe,CAACO,SAAhB,GAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B;AACH;AAEJ,aAbD,MAaO;AACHT,cAAAA,eAAe,CAACM,QAAhB,GAA2B,MAA3B;AACAN,cAAAA,eAAe,CAACO,SAAhB,GAA4BC,MAAM,CAACC,YAAP,CAAoB,IAApB,CAA5B;AACH;;AAEDnB,YAAAA,aAAa,CAACoB,IAAd,CAAmBV,eAAnB;AACH;;AACDW,UAAAA,OAAO,CAACC,GAAR,CAAYtB,aAAZ;AAEA,iBAAO;AACHM,YAAAA,UAAU,EAAEN;AADT,WAAP;AAGH,SA1CD;AA2CA,aAAKuB,gBAAL;AACH,OAhDL;AAiDH,KAtEmB;;AAAA,SAwEpBA,gBAxEoB,GAwED,MAAM;AACrB,WAAKC,YAAL,CAAkBC,KAAlB,GAA0B,KAAKD,YAAL,CAAkBC,KAAlB,CAAwBC,IAAxB,GAA+BC,WAA/B,EAA1B,CADqB,CAGrB;AACA;AACA;;AAEA,WAAK7B,QAAL,CAAgBC,KAAD,IAAW;AAEtB,YAAI6B,qBAAqB,GAAG7B,KAAK,CAACO,UAAN,CAAiBuB,MAAjB,CAA0BrB,YAAD,IAAkB;AACnE,iBACIA,YAAY,CAACC,QAAb,CAAsBqB,QAAtB,CAA+B,KAAKN,YAAL,CAAkBC,KAAjD,CADJ;AAGH,SAJ2B,CAA5B;AAMA,eAAO;AAACM,UAAAA,kBAAkB,EAAEH;AAArB,SAAP;AAEH,OAVD;AAWH,KA1FmB;;AAGhB,SAAK7B,KAAL,GAAa;AACTO,MAAAA,UAAU,EAAE,EADH;AAETyB,MAAAA,kBAAkB,EAAE;AAFX,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKxC,aAAL;AACA,SAAKyC,OAAL,GAAeC,WAAW,CAAE,MAAM;AAC9B,WAAK1C,aAAL;AACH,KAFyB,EAExB,IAFwB,CAA1B;AAGH;;AAED2C,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACH;;AA0EDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,+BACA;AAAO,UAAA,GAAG,EAAGC,OAAD,IAAa;AAAC,iBAAKd,YAAL,GAAoBc,OAApB;AAA4B,WAAtD;AAAwD,UAAA,IAAI,EAAC,MAA7D;AAAoE,UAAA,WAAW,EAAC,QAAhF;AAAyF,UAAA,QAAQ,EAAE,KAAKf;AAAxG;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,UAAD;AAAY,QAAA,UAAU,EAAE,KAAKxB,KAAL,CAAWO;AAAnC;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAvG0B;;AA0G/B,eAAejB,MAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport './Crypto.css';\r\nimport CryptoList from './CryptoList';\r\nimport axios from 'axios';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            cryptoList: [],\r\n            filteredCryptoList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getCryptoData();\r\n        this.timerID = setInterval( () => {\r\n            this.getCryptoData();\r\n        },5000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    getCryptoData = () => {\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(res => {\r\n                const tickers = res.data;\r\n\r\n                this.setState((state) => {\r\n                    let newCryptoList = [];\r\n\r\n                    for(const [ticker, cryptoRate] of Object.entries(tickers)){\r\n\r\n                        let lastCryptoObject = state.cryptoList.find( (cryptoObject) => {\r\n                            return(cryptoObject.currency === ticker)\r\n                        });\r\n\r\n                        let newCryptoObject = {\r\n                            currency: ticker,\r\n                            symbol: cryptoRate.symbol,\r\n                            buy: cryptoRate.buy,\r\n                            sell: cryptoRate.sell,\r\n                            last: cryptoRate.last\r\n                        }\r\n\r\n                        if (lastCryptoObject !== undefined) {\r\n                            \r\n                            if (newCryptoObject.last > lastCryptoObject.last) {\r\n                                newCryptoObject.cssClass = 'green';\r\n                                newCryptoObject.htmlArray = String.fromCharCode(8593);  \r\n                            } else if (newCryptoObject.last < lastCryptoObject.last) {\r\n                                newCryptoObject.cssClass = 'red';\r\n                                newCryptoObject.htmlArray = String.fromCharCode(8595);\r\n                            } else {\r\n                                newCryptoObject.cssClass = 'blue';\r\n                                newCryptoObject.htmlArray = String.fromCharCode(8596);\r\n                            }\r\n\r\n                        } else {\r\n                            newCryptoObject.cssClass = 'blue';\r\n                            newCryptoObject.htmlArray = String.fromCharCode(8596);\r\n                        }\r\n\r\n                        newCryptoList.push(newCryptoObject);\r\n                    }\r\n                    console.log(newCryptoList);\r\n\r\n                    return({\r\n                        cryptoList: newCryptoList\r\n                    })\r\n                });\r\n                this.filterCryptoList();\r\n            });\r\n    }\r\n\r\n    filterCryptoList = () => {\r\n        this._inputFilter.value = this._inputFilter.value.trim().toUpperCase();\r\n\r\n        // let filteredCryptoList = this.state.cryptoList.filter( (cryptoObject) => {\r\n        //     return cryptoObject.currency.includes(this._inputFilter.value);\r\n        // })\r\n\r\n        this.setState( (state) => {\r\n\r\n            let newfilteredCryptoList = state.cryptoList.filter( (cryptoObject) => {\r\n                return(\r\n                    cryptoObject.currency.includes(this._inputFilter.value)\r\n                    )\r\n            })\r\n            \r\n            return({filteredCryptoList: newfilteredCryptoList})\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className='Crypto'>\r\n                <input ref={(element) => {this._inputFilter = element}} type='text' placeholder='Filter' onChange={this.filterCryptoList} />\r\n                </div>\r\n                <CryptoList CryptoList={this.state.cryptoList}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Crypto;"]},"metadata":{},"sourceType":"module"}